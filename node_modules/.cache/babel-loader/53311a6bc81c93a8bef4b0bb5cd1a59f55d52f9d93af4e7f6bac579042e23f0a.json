{"ast":null,"code":"import _classCallCheck from \"C:/Users/barbu/Desktop/projeto-Akin/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/barbu/Desktop/projeto-Akin/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { substitute as _substitute } from \"./utils/replacements\";\nimport { createBase64Url, createBlobUrl, blob2base64 } from \"./utils/core\";\nimport Url from \"./utils/url\";\nimport mime from \"./utils/mime\";\nimport Path from \"./utils/path\";\nimport path from \"path-webpack\";\n\n/**\n * Handle Package Resources\n * @class\n * @param {Manifest} manifest\n * @param {object} [options]\n * @param {string} [options.replacements=\"base64\"]\n * @param {Archive} [options.archive]\n * @param {method} [options.resolver]\n */\nvar Resources = /*#__PURE__*/function () {\n  function Resources(manifest, options) {\n    _classCallCheck(this, Resources);\n    this.settings = {\n      replacements: options && options.replacements || \"base64\",\n      archive: options && options.archive,\n      resolver: options && options.resolver,\n      request: options && options.request\n    };\n    this.process(manifest);\n  }\n\n  /**\n   * Process resources\n   * @param {Manifest} manifest\n   */\n  _createClass(Resources, [{\n    key: \"process\",\n    value: function process(manifest) {\n      this.manifest = manifest;\n      this.resources = Object.keys(manifest).map(function (key) {\n        return manifest[key];\n      });\n      this.replacementUrls = [];\n      this.html = [];\n      this.assets = [];\n      this.css = [];\n      this.urls = [];\n      this.cssUrls = [];\n      this.split();\n      this.splitUrls();\n    }\n\n    /**\n     * Split resources by type\n     * @private\n     */\n  }, {\n    key: \"split\",\n    value: function split() {\n      // HTML\n      this.html = this.resources.filter(function (item) {\n        if (item.type === \"application/xhtml+xml\" || item.type === \"text/html\") {\n          return true;\n        }\n      });\n\n      // Exclude HTML\n      this.assets = this.resources.filter(function (item) {\n        if (item.type !== \"application/xhtml+xml\" && item.type !== \"text/html\") {\n          return true;\n        }\n      });\n\n      // Only CSS\n      this.css = this.resources.filter(function (item) {\n        if (item.type === \"text/css\") {\n          return true;\n        }\n      });\n    }\n\n    /**\n     * Convert split resources into Urls\n     * @private\n     */\n  }, {\n    key: \"splitUrls\",\n    value: function splitUrls() {\n      // All Assets Urls\n      this.urls = this.assets.map(function (item) {\n        return item.href;\n      }.bind(this));\n\n      // Css Urls\n      this.cssUrls = this.css.map(function (item) {\n        return item.href;\n      });\n    }\n\n    /**\n     * Create a url to a resource\n     * @param {string} url\n     * @return {Promise<string>} Promise resolves with url string\n     */\n  }, {\n    key: \"createUrl\",\n    value: function createUrl(url) {\n      var parsedUrl = new Url(url);\n      var mimeType = mime.lookup(parsedUrl.filename);\n      if (this.settings.archive) {\n        return this.settings.archive.createUrl(url, {\n          \"base64\": this.settings.replacements === \"base64\"\n        });\n      } else {\n        if (this.settings.replacements === \"base64\") {\n          return this.settings.request(url, 'blob').then(function (blob) {\n            return blob2base64(blob);\n          }).then(function (blob) {\n            return createBase64Url(blob, mimeType);\n          });\n        } else {\n          return this.settings.request(url, 'blob').then(function (blob) {\n            return createBlobUrl(blob, mimeType);\n          });\n        }\n      }\n    }\n\n    /**\n     * Create blob urls for all the assets\n     * @return {Promise}         returns replacement urls\n     */\n  }, {\n    key: \"replacements\",\n    value: function replacements() {\n      var _this = this;\n      if (this.settings.replacements === \"none\") {\n        return new Promise(function (resolve) {\n          resolve(this.urls);\n        }.bind(this));\n      }\n      var replacements = this.urls.map(function (url) {\n        var absolute = _this.settings.resolver(url);\n        return _this.createUrl(absolute).catch(function (err) {\n          console.error(err);\n          return null;\n        });\n      });\n      return Promise.all(replacements).then(function (replacementUrls) {\n        _this.replacementUrls = replacementUrls.filter(function (url) {\n          return typeof url === \"string\";\n        });\n        return replacementUrls;\n      });\n    }\n\n    /**\n     * Replace URLs in CSS resources\n     * @private\n     * @param  {Archive} [archive]\n     * @param  {method} [resolver]\n     * @return {Promise}\n     */\n  }, {\n    key: \"replaceCss\",\n    value: function replaceCss(archive, resolver) {\n      var replaced = [];\n      archive = archive || this.settings.archive;\n      resolver = resolver || this.settings.resolver;\n      this.cssUrls.forEach(function (href) {\n        var replacement = this.createCssFile(href, archive, resolver).then(function (replacementUrl) {\n          // switch the url in the replacementUrls\n          var indexInUrls = this.urls.indexOf(href);\n          if (indexInUrls > -1) {\n            this.replacementUrls[indexInUrls] = replacementUrl;\n          }\n        }.bind(this));\n        replaced.push(replacement);\n      }.bind(this));\n      return Promise.all(replaced);\n    }\n\n    /**\n     * Create a new CSS file with the replaced URLs\n     * @private\n     * @param  {string} href the original css file\n     * @return {Promise}  returns a BlobUrl to the new CSS file or a data url\n     */\n  }, {\n    key: \"createCssFile\",\n    value: function createCssFile(href) {\n      var _this2 = this;\n      var newUrl;\n      if (path.isAbsolute(href)) {\n        return new Promise(function (resolve) {\n          resolve();\n        });\n      }\n      var absolute = this.settings.resolver(href);\n\n      // Get the text of the css file from the archive\n      var textResponse;\n      if (this.settings.archive) {\n        textResponse = this.settings.archive.getText(absolute);\n      } else {\n        textResponse = this.settings.request(absolute, \"text\");\n      }\n\n      // Get asset links relative to css file\n      var relUrls = this.urls.map(function (assetHref) {\n        var resolved = _this2.settings.resolver(assetHref);\n        var relative = new Path(absolute).relative(resolved);\n        return relative;\n      });\n      if (!textResponse) {\n        // file not found, don't replace\n        return new Promise(function (resolve) {\n          resolve();\n        });\n      }\n      return textResponse.then(function (text) {\n        // Replacements in the css text\n        text = _substitute(text, relUrls, _this2.replacementUrls);\n\n        // Get the new url\n        if (_this2.settings.replacements === \"base64\") {\n          newUrl = createBase64Url(text, \"text/css\");\n        } else {\n          newUrl = createBlobUrl(text, \"text/css\");\n        }\n        return newUrl;\n      }, function (err) {\n        // handle response errors\n        return new Promise(function (resolve) {\n          resolve();\n        });\n      });\n    }\n\n    /**\n     * Resolve all resources URLs relative to an absolute URL\n     * @param  {string} absolute to be resolved to\n     * @param  {resolver} [resolver]\n     * @return {string[]} array with relative Urls\n     */\n  }, {\n    key: \"relativeTo\",\n    value: function relativeTo(absolute, resolver) {\n      resolver = resolver || this.settings.resolver;\n\n      // Get Urls relative to current sections\n      return this.urls.map(function (href) {\n        var resolved = resolver(href);\n        var relative = new Path(absolute).relative(resolved);\n        return relative;\n      }.bind(this));\n    }\n\n    /**\n     * Get a URL for a resource\n     * @param  {string} path\n     * @return {string} url\n     */\n  }, {\n    key: \"get\",\n    value: function get(path) {\n      var indexInUrls = this.urls.indexOf(path);\n      if (indexInUrls === -1) {\n        return;\n      }\n      if (this.replacementUrls.length) {\n        return new Promise(function (resolve, reject) {\n          resolve(this.replacementUrls[indexInUrls]);\n        }.bind(this));\n      } else {\n        return this.createUrl(path);\n      }\n    }\n\n    /**\n     * Substitute urls in content, with replacements,\n     * relative to a url if provided\n     * @param  {string} content\n     * @param  {string} [url]   url to resolve to\n     * @return {string}         content with urls substituted\n     */\n  }, {\n    key: \"substitute\",\n    value: function substitute(content, url) {\n      var relUrls;\n      if (url) {\n        relUrls = this.relativeTo(url);\n      } else {\n        relUrls = this.urls;\n      }\n      return _substitute(content, relUrls, this.replacementUrls);\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.settings = undefined;\n      this.manifest = undefined;\n      this.resources = undefined;\n      this.replacementUrls = undefined;\n      this.html = undefined;\n      this.assets = undefined;\n      this.css = undefined;\n      this.urls = undefined;\n      this.cssUrls = undefined;\n    }\n  }]);\n  return Resources;\n}();\nexport default Resources;","map":{"version":3,"names":["substitute","createBase64Url","createBlobUrl","blob2base64","Url","mime","Path","path","Resources","manifest","options","_classCallCheck","settings","replacements","archive","resolver","request","process","_createClass","key","value","resources","Object","keys","map","replacementUrls","html","assets","css","urls","cssUrls","split","splitUrls","filter","item","type","href","bind","createUrl","url","parsedUrl","mimeType","lookup","filename","then","blob","_this","Promise","resolve","absolute","catch","err","console","error","all","replaceCss","replaced","forEach","replacement","createCssFile","replacementUrl","indexInUrls","indexOf","push","_this2","newUrl","isAbsolute","textResponse","getText","relUrls","assetHref","resolved","relative","text","relativeTo","get","length","reject","content","destroy","undefined"],"sources":["C:/Users/barbu/Desktop/projeto-Akin/node_modules/epubjs/src/resources.js"],"sourcesContent":["import {substitute} from \"./utils/replacements\";\nimport {createBase64Url, createBlobUrl, blob2base64} from \"./utils/core\";\nimport Url from \"./utils/url\";\nimport mime from \"./utils/mime\";\nimport Path from \"./utils/path\";\nimport path from \"path-webpack\";\n\n/**\n * Handle Package Resources\n * @class\n * @param {Manifest} manifest\n * @param {object} [options]\n * @param {string} [options.replacements=\"base64\"]\n * @param {Archive} [options.archive]\n * @param {method} [options.resolver]\n */\nclass Resources {\n\tconstructor(manifest, options) {\n\t\tthis.settings = {\n\t\t\treplacements: (options && options.replacements) || \"base64\",\n\t\t\tarchive: (options && options.archive),\n\t\t\tresolver: (options && options.resolver),\n\t\t\trequest: (options && options.request)\n\t\t};\n\n\t\tthis.process(manifest);\n\t}\n\n\t/**\n\t * Process resources\n\t * @param {Manifest} manifest\n\t */\n\tprocess(manifest){\n\t\tthis.manifest = manifest;\n\t\tthis.resources = Object.keys(manifest).\n\t\t\tmap(function (key){\n\t\t\t\treturn manifest[key];\n\t\t\t});\n\n\t\tthis.replacementUrls = [];\n\n\t\tthis.html = [];\n\t\tthis.assets = [];\n\t\tthis.css = [];\n\n\t\tthis.urls = [];\n\t\tthis.cssUrls = [];\n\n\t\tthis.split();\n\t\tthis.splitUrls();\n\t}\n\n\t/**\n\t * Split resources by type\n\t * @private\n\t */\n\tsplit(){\n\n\t\t// HTML\n\t\tthis.html = this.resources.\n\t\t\tfilter(function (item){\n\t\t\t\tif (item.type === \"application/xhtml+xml\" ||\n\t\t\t\t\t\titem.type === \"text/html\") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Exclude HTML\n\t\tthis.assets = this.resources.\n\t\t\tfilter(function (item){\n\t\t\t\tif (item.type !== \"application/xhtml+xml\" &&\n\t\t\t\t\t\titem.type !== \"text/html\") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Only CSS\n\t\tthis.css = this.resources.\n\t\t\tfilter(function (item){\n\t\t\t\tif (item.type === \"text/css\") {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Convert split resources into Urls\n\t * @private\n\t */\n\tsplitUrls(){\n\n\t\t// All Assets Urls\n\t\tthis.urls = this.assets.\n\t\t\tmap(function(item) {\n\t\t\t\treturn item.href;\n\t\t\t}.bind(this));\n\n\t\t// Css Urls\n\t\tthis.cssUrls = this.css.map(function(item) {\n\t\t\treturn item.href;\n\t\t});\n\n\t}\n\n\t/**\n\t * Create a url to a resource\n\t * @param {string} url\n\t * @return {Promise<string>} Promise resolves with url string\n\t */\n\tcreateUrl (url) {\n\t\tvar parsedUrl = new Url(url);\n\t\tvar mimeType = mime.lookup(parsedUrl.filename);\n\n\t\tif (this.settings.archive) {\n\t\t\treturn this.settings.archive.createUrl(url, {\"base64\": (this.settings.replacements === \"base64\")});\n\t\t} else {\n\t\t\tif (this.settings.replacements === \"base64\") {\n\t\t\t\treturn this.settings.request(url, 'blob')\n\t\t\t\t\t.then((blob) => {\n\t\t\t\t\t\treturn blob2base64(blob);\n\t\t\t\t\t})\n\t\t\t\t\t.then((blob) => {\n\t\t\t\t\t\treturn createBase64Url(blob, mimeType);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\treturn this.settings.request(url, 'blob').then((blob) => {\n\t\t\t\t\treturn createBlobUrl(blob, mimeType);\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Create blob urls for all the assets\n\t * @return {Promise}         returns replacement urls\n\t */\n\treplacements(){\n\t\tif (this.settings.replacements === \"none\") {\n\t\t\treturn new Promise(function(resolve) {\n\t\t\t\tresolve(this.urls);\n\t\t\t}.bind(this));\n\t\t}\n\n\t\tvar replacements = this.urls.map( (url) => {\n\t\t\t\tvar absolute = this.settings.resolver(url);\n\n\t\t\t\treturn this.createUrl(absolute).\n\t\t\t\t\tcatch((err) => {\n\t\t\t\t\t\tconsole.error(err);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t});\n\t\t\t});\n\n\t\treturn Promise.all(replacements)\n\t\t\t.then( (replacementUrls) => {\n\t\t\t\tthis.replacementUrls = replacementUrls.filter((url) => {\n\t\t\t\t\treturn (typeof(url) === \"string\");\n\t\t\t\t});\n\t\t\t\treturn replacementUrls;\n\t\t\t});\n\t}\n\n\t/**\n\t * Replace URLs in CSS resources\n\t * @private\n\t * @param  {Archive} [archive]\n\t * @param  {method} [resolver]\n\t * @return {Promise}\n\t */\n\treplaceCss(archive, resolver){\n\t\tvar replaced = [];\n\t\tarchive = archive || this.settings.archive;\n\t\tresolver = resolver || this.settings.resolver;\n\t\tthis.cssUrls.forEach(function(href) {\n\t\t\tvar replacement = this.createCssFile(href, archive, resolver)\n\t\t\t\t.then(function (replacementUrl) {\n\t\t\t\t\t// switch the url in the replacementUrls\n\t\t\t\t\tvar indexInUrls = this.urls.indexOf(href);\n\t\t\t\t\tif (indexInUrls > -1) {\n\t\t\t\t\t\tthis.replacementUrls[indexInUrls] = replacementUrl;\n\t\t\t\t\t}\n\t\t\t\t}.bind(this))\n\n\n\t\t\treplaced.push(replacement);\n\t\t}.bind(this));\n\t\treturn Promise.all(replaced);\n\t}\n\n\t/**\n\t * Create a new CSS file with the replaced URLs\n\t * @private\n\t * @param  {string} href the original css file\n\t * @return {Promise}  returns a BlobUrl to the new CSS file or a data url\n\t */\n\tcreateCssFile(href){\n\t\tvar newUrl;\n\n\t\tif (path.isAbsolute(href)) {\n\t\t\treturn new Promise(function(resolve){\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\n\t\tvar absolute = this.settings.resolver(href);\n\n\t\t// Get the text of the css file from the archive\n\t\tvar textResponse;\n\n\t\tif (this.settings.archive) {\n\t\t\ttextResponse = this.settings.archive.getText(absolute);\n\t\t} else {\n\t\t\ttextResponse = this.settings.request(absolute, \"text\");\n\t\t}\n\n\t\t// Get asset links relative to css file\n\t\tvar relUrls = this.urls.map( (assetHref) => {\n\t\t\tvar resolved = this.settings.resolver(assetHref);\n\t\t\tvar relative = new Path(absolute).relative(resolved);\n\n\t\t\treturn relative;\n\t\t});\n\n\t\tif (!textResponse) {\n\t\t\t// file not found, don't replace\n\t\t\treturn new Promise(function(resolve){\n\t\t\t\tresolve();\n\t\t\t});\n\t\t}\n\n\t\treturn textResponse.then( (text) => {\n\t\t\t// Replacements in the css text\n\t\t\ttext = substitute(text, relUrls, this.replacementUrls);\n\n\t\t\t// Get the new url\n\t\t\tif (this.settings.replacements === \"base64\") {\n\t\t\t\tnewUrl = createBase64Url(text, \"text/css\");\n\t\t\t} else {\n\t\t\t\tnewUrl = createBlobUrl(text, \"text/css\");\n\t\t\t}\n\n\t\t\treturn newUrl;\n\t\t}, (err) => {\n\t\t\t// handle response errors\n\t\t\treturn new Promise(function(resolve){\n\t\t\t\tresolve();\n\t\t\t});\n\t\t});\n\n\t}\n\n\t/**\n\t * Resolve all resources URLs relative to an absolute URL\n\t * @param  {string} absolute to be resolved to\n\t * @param  {resolver} [resolver]\n\t * @return {string[]} array with relative Urls\n\t */\n\trelativeTo(absolute, resolver){\n\t\tresolver = resolver || this.settings.resolver;\n\n\t\t// Get Urls relative to current sections\n\t\treturn this.urls.\n\t\t\tmap(function(href) {\n\t\t\t\tvar resolved = resolver(href);\n\t\t\t\tvar relative = new Path(absolute).relative(resolved);\n\t\t\t\treturn relative;\n\t\t\t}.bind(this));\n\t}\n\n\t/**\n\t * Get a URL for a resource\n\t * @param  {string} path\n\t * @return {string} url\n\t */\n\tget(path) {\n\t\tvar indexInUrls = this.urls.indexOf(path);\n\t\tif (indexInUrls === -1) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.replacementUrls.length) {\n\t\t\treturn new Promise(function(resolve, reject) {\n\t\t\t\tresolve(this.replacementUrls[indexInUrls]);\n\t\t\t}.bind(this));\n\t\t} else {\n\t\t\treturn this.createUrl(path);\n\t\t}\n\t}\n\n\t/**\n\t * Substitute urls in content, with replacements,\n\t * relative to a url if provided\n\t * @param  {string} content\n\t * @param  {string} [url]   url to resolve to\n\t * @return {string}         content with urls substituted\n\t */\n\tsubstitute(content, url) {\n\t\tvar relUrls;\n\t\tif (url) {\n\t\t\trelUrls = this.relativeTo(url);\n\t\t} else {\n\t\t\trelUrls = this.urls;\n\t\t}\n\t\treturn substitute(content, relUrls, this.replacementUrls);\n\t}\n\n\tdestroy() {\n\t\tthis.settings = undefined;\n\t\tthis.manifest = undefined;\n\t\tthis.resources = undefined;\n\t\tthis.replacementUrls = undefined;\n\t\tthis.html = undefined;\n\t\tthis.assets = undefined;\n\t\tthis.css = undefined;\n\n\t\tthis.urls = undefined;\n\t\tthis.cssUrls = undefined;\n\t}\n}\n\nexport default Resources;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}